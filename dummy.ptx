//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32688072
// Cuda compilation tools, release 12.1, V12.1.105
// Based on NVVM 7.0.1
//

.version 8.1
.target sm_90
.address_size 64

	// .globl	_Z14add_one_kernelPim
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
// _ZZ14add_one_kernelPimE9smem_data has been demoted
// _ZZ14add_one_kernelPimE3bar has been demoted

.visible .entry _Z14add_one_kernelPim(
	.param .u64 _Z14add_one_kernelPim_param_0,
	.param .u64 _Z14add_one_kernelPim_param_1
)
{
	.reg .pred 	%p<11>;
	.reg .b32 	%r<65>;
	.reg .b64 	%rd<53>;
	// demoted variable
	.shared .align 16 .b8 _ZZ14add_one_kernelPimE9smem_data[4096];
	// demoted variable
	.shared .align 8 .b8 _ZZ14add_one_kernelPimE3bar[8];

	ld.param.u64 	%rd7, [_Z14add_one_kernelPim_param_0];
	ld.param.u64 	%rd8, [_Z14add_one_kernelPim_param_1];
	mov.u32 	%r64, %tid.x;
	setp.ne.s32 	%p1, %r64, 0;
	@%p1 bra 	$L__BB0_2;

	mov.u32 	%r12, %ntid.x;
	mov.u32 	%r11, _ZZ14add_one_kernelPimE3bar;
	// begin inline asm
	mbarrier.init.shared.b64 [%r11], %r12;
	// end inline asm
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm

$L__BB0_2:
	bar.sync 	0;
	@%p1 bra 	$L__BB0_6;

	shl.b64 	%rd9, %rd8, 2;
	add.s64 	%rd52, %rd7, %rd9;
	mov.u32 	%r62, 0;
	mov.u32 	%r61, _ZZ14add_one_kernelPimE9smem_data;

$L__BB0_4:
	// begin inline asm
	cp.async.cg.shared.global [%r61], [%rd52], 16, 16;
	// end inline asm
	add.s32 	%r16, %r61, 16;
	add.s64 	%rd11, %rd52, 16;
	// begin inline asm
	cp.async.cg.shared.global [%r16], [%rd11], 16, 16;
	// end inline asm
	add.s32 	%r17, %r61, 32;
	add.s64 	%rd12, %rd52, 32;
	// begin inline asm
	cp.async.cg.shared.global [%r17], [%rd12], 16, 16;
	// end inline asm
	add.s32 	%r18, %r61, 48;
	add.s64 	%rd13, %rd52, 48;
	// begin inline asm
	cp.async.cg.shared.global [%r18], [%rd13], 16, 16;
	// end inline asm
	add.s32 	%r19, %r61, 64;
	add.s64 	%rd14, %rd52, 64;
	// begin inline asm
	cp.async.cg.shared.global [%r19], [%rd14], 16, 16;
	// end inline asm
	add.s32 	%r20, %r61, 80;
	add.s64 	%rd15, %rd52, 80;
	// begin inline asm
	cp.async.cg.shared.global [%r20], [%rd15], 16, 16;
	// end inline asm
	add.s32 	%r21, %r61, 96;
	add.s64 	%rd16, %rd52, 96;
	// begin inline asm
	cp.async.cg.shared.global [%r21], [%rd16], 16, 16;
	// end inline asm
	add.s32 	%r22, %r61, 112;
	add.s64 	%rd17, %rd52, 112;
	// begin inline asm
	cp.async.cg.shared.global [%r22], [%rd17], 16, 16;
	// end inline asm
	add.s32 	%r23, %r61, 128;
	add.s64 	%rd18, %rd52, 128;
	// begin inline asm
	cp.async.cg.shared.global [%r23], [%rd18], 16, 16;
	// end inline asm
	add.s32 	%r24, %r61, 144;
	add.s64 	%rd19, %rd52, 144;
	// begin inline asm
	cp.async.cg.shared.global [%r24], [%rd19], 16, 16;
	// end inline asm
	add.s32 	%r25, %r61, 160;
	add.s64 	%rd20, %rd52, 160;
	// begin inline asm
	cp.async.cg.shared.global [%r25], [%rd20], 16, 16;
	// end inline asm
	add.s32 	%r26, %r61, 176;
	add.s64 	%rd21, %rd52, 176;
	// begin inline asm
	cp.async.cg.shared.global [%r26], [%rd21], 16, 16;
	// end inline asm
	add.s32 	%r27, %r61, 192;
	add.s64 	%rd22, %rd52, 192;
	// begin inline asm
	cp.async.cg.shared.global [%r27], [%rd22], 16, 16;
	// end inline asm
	add.s32 	%r28, %r61, 208;
	add.s64 	%rd23, %rd52, 208;
	// begin inline asm
	cp.async.cg.shared.global [%r28], [%rd23], 16, 16;
	// end inline asm
	add.s32 	%r29, %r61, 224;
	add.s64 	%rd24, %rd52, 224;
	// begin inline asm
	cp.async.cg.shared.global [%r29], [%rd24], 16, 16;
	// end inline asm
	add.s32 	%r30, %r61, 240;
	add.s64 	%rd25, %rd52, 240;
	// begin inline asm
	cp.async.cg.shared.global [%r30], [%rd25], 16, 16;
	// end inline asm
	add.s32 	%r31, %r61, 256;
	add.s64 	%rd26, %rd52, 256;
	// begin inline asm
	cp.async.cg.shared.global [%r31], [%rd26], 16, 16;
	// end inline asm
	add.s32 	%r32, %r61, 272;
	add.s64 	%rd27, %rd52, 272;
	// begin inline asm
	cp.async.cg.shared.global [%r32], [%rd27], 16, 16;
	// end inline asm
	add.s32 	%r33, %r61, 288;
	add.s64 	%rd28, %rd52, 288;
	// begin inline asm
	cp.async.cg.shared.global [%r33], [%rd28], 16, 16;
	// end inline asm
	add.s32 	%r34, %r61, 304;
	add.s64 	%rd29, %rd52, 304;
	// begin inline asm
	cp.async.cg.shared.global [%r34], [%rd29], 16, 16;
	// end inline asm
	add.s32 	%r35, %r61, 320;
	add.s64 	%rd30, %rd52, 320;
	// begin inline asm
	cp.async.cg.shared.global [%r35], [%rd30], 16, 16;
	// end inline asm
	add.s32 	%r36, %r61, 336;
	add.s64 	%rd31, %rd52, 336;
	// begin inline asm
	cp.async.cg.shared.global [%r36], [%rd31], 16, 16;
	// end inline asm
	add.s32 	%r37, %r61, 352;
	add.s64 	%rd32, %rd52, 352;
	// begin inline asm
	cp.async.cg.shared.global [%r37], [%rd32], 16, 16;
	// end inline asm
	add.s32 	%r38, %r61, 368;
	add.s64 	%rd33, %rd52, 368;
	// begin inline asm
	cp.async.cg.shared.global [%r38], [%rd33], 16, 16;
	// end inline asm
	add.s32 	%r39, %r61, 384;
	add.s64 	%rd34, %rd52, 384;
	// begin inline asm
	cp.async.cg.shared.global [%r39], [%rd34], 16, 16;
	// end inline asm
	add.s32 	%r40, %r61, 400;
	add.s64 	%rd35, %rd52, 400;
	// begin inline asm
	cp.async.cg.shared.global [%r40], [%rd35], 16, 16;
	// end inline asm
	add.s32 	%r41, %r61, 416;
	add.s64 	%rd36, %rd52, 416;
	// begin inline asm
	cp.async.cg.shared.global [%r41], [%rd36], 16, 16;
	// end inline asm
	add.s32 	%r42, %r61, 432;
	add.s64 	%rd37, %rd52, 432;
	// begin inline asm
	cp.async.cg.shared.global [%r42], [%rd37], 16, 16;
	// end inline asm
	add.s32 	%r43, %r61, 448;
	add.s64 	%rd38, %rd52, 448;
	// begin inline asm
	cp.async.cg.shared.global [%r43], [%rd38], 16, 16;
	// end inline asm
	add.s32 	%r44, %r61, 464;
	add.s64 	%rd39, %rd52, 464;
	// begin inline asm
	cp.async.cg.shared.global [%r44], [%rd39], 16, 16;
	// end inline asm
	add.s32 	%r45, %r61, 480;
	add.s64 	%rd40, %rd52, 480;
	// begin inline asm
	cp.async.cg.shared.global [%r45], [%rd40], 16, 16;
	// end inline asm
	add.s32 	%r46, %r61, 496;
	add.s64 	%rd41, %rd52, 496;
	// begin inline asm
	cp.async.cg.shared.global [%r46], [%rd41], 16, 16;
	// end inline asm
	add.s32 	%r61, %r61, 512;
	add.s64 	%rd52, %rd52, 512;
	add.s32 	%r62, %r62, 512;
	setp.lt.u32 	%p3, %r62, 4096;
	@%p3 bra 	$L__BB0_4;

	mov.u32 	%r47, _ZZ14add_one_kernelPimE3bar;
	// begin inline asm
	cp.async.mbarrier.arrive.shared.b64 [%r47];
	// end inline asm

$L__BB0_6:
	mov.u32 	%r48, _ZZ14add_one_kernelPimE3bar;
	mov.u32 	%r49, 1;
	// begin inline asm
	mbarrier.arrive.shared.b64 %rd42, [%r48], %r49;
	// end inline asm
	// begin inline asm
	mov.u64 %rd43, %globaltimer;
	// end inline asm
	mov.u32 	%r63, 0;
	bra.uni 	$L__BB0_7;

$L__BB0_19:
	add.s32 	%r63, %r63, 1;

$L__BB0_7:
	// begin inline asm
	{
	.reg .pred p;
	mbarrier.try_wait.shared.b64 p, [%r48], %rd42;
	selp.b32 %r51, 1, 0, p;
	}
	// end inline asm
	setp.eq.s32 	%p4, %r51, 0;
	@%p4 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;

$L__BB0_14:
	setp.lt.s32 	%p8, %r63, 16;
	@%p8 bra 	$L__BB0_19;

	// begin inline asm
	mov.u64 %rd47, %globaltimer;
	// end inline asm
	sub.s64 	%rd6, %rd47, %rd43;
	setp.lt.s64 	%p9, %rd6, 4000000;
	@%p9 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_16;

$L__BB0_17:
	setp.lt.s64 	%p10, %rd6, 40000;
	@%p10 bra 	$L__BB0_7;

	shr.s64 	%rd48, %rd6, 63;
	shr.u64 	%rd49, %rd48, 62;
	add.s64 	%rd50, %rd6, %rd49;
	shr.u64 	%rd51, %rd50, 2;
	cvt.u32.u64 	%r60, %rd51;
	// begin inline asm
	nanosleep.u32 %r60;
	// end inline asm
	bra.uni 	$L__BB0_7;

$L__BB0_16:
	mov.u32 	%r59, 1000000;
	// begin inline asm
	nanosleep.u32 %r59;
	// end inline asm
	bra.uni 	$L__BB0_7;

$L__BB0_8:
	setp.gt.u32 	%p5, %r64, 1023;
	@%p5 bra 	$L__BB0_11;

	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r54, _ZZ14add_one_kernelPimE9smem_data;

$L__BB0_10:
	shl.b32 	%r53, %r64, 2;
	add.s32 	%r55, %r54, %r53;
	ld.shared.u32 	%r56, [%r55];
	add.s32 	%r57, %r56, 1;
	st.shared.u32 	[%r55], %r57;
	add.s32 	%r64, %r64, %r7;
	setp.lt.u32 	%p6, %r64, 1024;
	@%p6 bra 	$L__BB0_10;

$L__BB0_11:
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	@%p1 bra 	$L__BB0_13;

	shl.b64 	%rd46, %rd8, 2;
	add.s64 	%rd45, %rd7, %rd46;
	mov.u32 	%r58, _ZZ14add_one_kernelPimE9smem_data;
	// begin inline asm
	cp.async.bulk.global.shared::cta.bulk_group [%rd45], [%r58], 4096;
	// end inline asm
	// begin inline asm
	cp.async.bulk.commit_group;
	// end inline asm
	// begin inline asm
	cp.async.bulk.wait_group.read 0;
	// end inline asm

$L__BB0_13:
	ret;

}

